var ProLeasePlugin=function(t,e){"use strict";var n=Object.defineProperty,o=(t,e,o)=>((t,e,o)=>e in t?n(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o)(t,"symbol"!=typeof e?e+"":e,o);class r{constructor(){o(this,"manifest",{id:"dj.ifrs16.prolease",name:"ProLease IFRS 16",version:"6.0.0",author:"DJCalc / Código",description:"IFRS 16 lease accounting calculator with comprehensive amortization schedules",permissions:["read:workbook","write:workbook","ui:toolbar","ui:panel","formula:register","read:storage","write:storage"],entryPoint:"prolease-ifrs16-plugin.ts"}),o(this,"context"),o(this,"contracts",[]),o(this,"worker")}async init(t){this.context=t,e.logger.info("[ProLeasePlugin] Initializing v6.0.0...");try{await this.loadContracts(),this.worker=this.createCalculationWorker(),this.registerFormulas(),this.setupUI(),e.logger.info(`[ProLeasePlugin] Ready with ${this.contracts.length} saved contracts`),t.ui.showToast(`ProLease IFRS 16 loaded! ${this.contracts.length} contract(s)`,"success")}catch(n){throw e.logger.error("[ProLeasePlugin] Initialization failed",n),t.ui.showToast("Failed to load ProLease plugin","error"),n}}async dispose(){e.logger.info("[ProLeasePlugin] Disposing..."),this.worker&&(this.worker.terminate(),this.worker=void 0),await this.saveContracts(),e.logger.info("[ProLeasePlugin] Disposed successfully")}async loadContracts(){try{const t=await this.context.storage.get("contracts");this.contracts=t||[],e.logger.info(`[ProLeasePlugin] Loaded ${this.contracts.length} contracts`)}catch(t){e.logger.error("[ProLeasePlugin] Failed to load contracts",t),this.contracts=[]}}async saveContracts(){try{await this.context.storage.set("contracts",this.contracts),e.logger.info(`[ProLeasePlugin] Saved ${this.contracts.length} contracts`)}catch(t){throw e.logger.error("[ProLeasePlugin] Failed to save contracts",t),t}}registerFormulas(){const t=this.context.kernel.calcEngine.getRegistry();t.register("LEASE_PV",(t,e,n)=>0===t?n*e:n*((1-Math.pow(1+t,-e))/t),{argCount:3,description:"Calculate present value for lease payments (rate, months, payment)"}),t.register("LEASE_MONTHLY_RATE",t=>Math.pow(1+t/100,1/12)-1,{argCount:1,description:"Convert annual discount rate to monthly rate (annual %)"}),t.register("LEASE_ROU_OPENING",(t,e,n)=>t+e-n,{argCount:3,description:"Calculate opening ROU asset (liability, direct costs, allowance)"}),e.logger.info("[ProLeasePlugin] Registered 3 IFRS 16 formulas")}setupUI(){this.context.ui.addToolbarButton({id:"prolease-new-contract",label:"New Lease",icon:"📋",tooltip:"Create new IFRS 16 lease contract",onClick:()=>this.handleNewContract()}),this.context.ui.addPanel({id:"prolease-manager",title:"📋 ProLease Manager",position:"right",render:t=>this.renderControlPanel(t)}),e.logger.info("[ProLeasePlugin] UI elements registered")}renderControlPanel(t){t.innerHTML=`\n      <div class="prolease-panel" style="padding: 8px;">\n        <button id="prolease-create-btn" class="prolease-btn-primary" style="\n          width: 100%;\n          padding: 10px;\n          margin-bottom: 12px;\n          background: #3b82f6;\n          color: white;\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          font-weight: 500;\n        ">\n          ➕ Create New Contract\n        </button>\n\n        <div style="margin-bottom: 8px; font-size: 12px; color: #64748b; font-weight: 500;">\n          SAVED CONTRACTS (${this.contracts.length})\n        </div>\n\n        <div id="prolease-contracts-list" style="\n          max-height: 400px;\n          overflow-y: auto;\n          border: 1px solid #e2e8f0;\n          border-radius: 6px;\n        ">\n          ${this.renderContractsList()}\n        </div>\n      </div>\n    `;const e=t.querySelector("#prolease-create-btn");e?.addEventListener("click",()=>this.handleNewContract()),this.attachContractListeners(t)}renderContractsList(){return 0===this.contracts.length?'\n        <div style="padding: 20px; text-align: center; color: #94a3b8; font-size: 13px;">\n          No contracts yet.<br>Click "Create New Contract" to begin.\n        </div>\n      ':this.contracts.map(t=>`\n        <div class="contract-item" style="\n          padding: 12px;\n          border-bottom: 1px solid #e2e8f0;\n          transition: background 0.2s;\n        ">\n          <div style="font-weight: 600; font-size: 14px; color: #1e293b; margin-bottom: 4px;">\n            ${this.escapeHtml(t.contractName)}\n          </div>\n          <div style="font-size: 12px; color: #64748b; margin-bottom: 8px;">\n            📅 ${new Date(t.startDate).toLocaleDateString()} |\n            📊 ${t.termMonths} months |\n            💰 ${this.formatCurrency(t.totalRent)}/mo\n          </div>\n          <div style="display: flex; gap: 6px;">\n            <button\n              data-contract-id="${t.id}"\n              data-action="recalc"\n              style="\n                flex: 1;\n                padding: 6px 12px;\n                font-size: 12px;\n                background: #10b981;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                font-weight: 500;\n              ">\n              🔄 Recalculate\n            </button>\n            <button\n              data-contract-id="${t.id}"\n              data-action="delete"\n              style="\n                padding: 6px 12px;\n                font-size: 12px;\n                background: #ef4444;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                font-weight: 500;\n              ">\n              🗑️\n            </button>\n          </div>\n        </div>\n      `).join("")}attachContractListeners(t){t.querySelectorAll('[data-action="recalc"]').forEach(t=>{t.addEventListener("click",t=>{const e=t.target.getAttribute("data-contract-id"),n=this.contracts.find(t=>t.id===e);n&&this.handleRecalculate(n)})}),t.querySelectorAll('[data-action="delete"]').forEach(t=>{t.addEventListener("click",t=>{const e=t.target.getAttribute("data-contract-id");this.handleDelete(e)})}),t.querySelectorAll(".contract-item").forEach(t=>{t.addEventListener("mouseenter",()=>{t.style.background="#f8fafc"}),t.addEventListener("mouseleave",()=>{t.style.background="transparent"})})}handleNewContract(){e.logger.info("[ProLeasePlugin] Creating new contract");const t=prompt("Contract Name:",`Contract ${this.contracts.length+1}`);if(!t)return void this.context.ui.showToast("Contract creation cancelled","info");if(this.contracts.some(e=>e.contractName===t))return void this.context.ui.showToast("Contract name already exists","error");const n=this.promptNumber("Term (months):",36);if(null===n||n<=0)return;const o=prompt("Start Date (YYYY-MM-DD):",(new Date).toISOString().split("T")[0]);if(!o)return;const r=this.promptNumber("Monthly Rent (gross):",8e4);if(null===r||r<=0)return;const a=this.promptNumber("Monthly Service Deductions:",5e3);if(null===a)return;const i=this.promptNumber("Annual Discount Rate (%):",15);if(null===i)return;const s=this.promptNumber("Landlord Allowance:",0);if(null===s)return;const l=this.promptNumber("Initial Direct Costs:",3e4);if(null===l)return;const c={id:this.generateId(),contractName:t,termMonths:n,startDate:o,totalRent:r,serviceDeductions:a,discountRate:i,initialLandlordAllowance:s,initialDirectCosts:l,createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()};this.contracts.push(c),this.saveContracts(),e.logger.info("[ProLeasePlugin] Contract created",{id:c.id,name:t}),this.context.ui.showToast(`Contract "${t}" created. Calculating...`,"info"),this.calculateAndCreateSheet(c),this.refreshControlPanel()}handleRecalculate(t){e.logger.info("[ProLeasePlugin] Recalculating contract",{id:t.id}),this.context.ui.showToast(`Recalculating "${t.contractName}"...`,"info"),this.calculateAndCreateSheet(t)}async handleDelete(t){if(!t)return;const n=this.contracts.find(e=>e.id===t);n&&confirm(`Delete contract "${n.contractName}"?\n\nThis action cannot be undone.`)&&(this.contracts=this.contracts.filter(e=>e.id!==t),await this.saveContracts(),e.logger.info("[ProLeasePlugin] Contract deleted",{id:t}),this.context.ui.showToast("Contract deleted","success"),this.refreshControlPanel())}calculateAndCreateSheet(t){this.worker?(this.worker.postMessage({action:"calculate",payload:t}),this.worker.onmessage=n=>{const{action:o,payload:r,error:a}=n.data||{};if(a)return e.logger.error("[ProLeasePlugin] Calculation error:",a),void this.context.ui.showToast(`Calculation error: ${a}`,"error");"calculationComplete"===o&&this.populateSheet(t,r.calculatedRows)}):this.context.ui.showToast("Calculator not ready","error")}populateSheet(t,n){try{const o=this.context.kernel.workbookManager;let r=o.getActiveWorkbook();r||(r=o.createWorkbook("ProLease IFRS 16 Calculations"),o.setActiveWorkbook(r.id),e.logger.info("[ProLeasePlugin] Created new workbook"));const a=`IFRS16 - ${t.contractName}`;let i=Array.from(r.sheets.values()).find(t=>t.name===a);if(i){i.rows.forEach((t,e)=>{t.forEach((t,n)=>{i.clearCell(e,n)})}),e.logger.info("[ProLeasePlugin] Cleared existing sheet",{name:a})}else i=r.addSheet(a),e.logger.info("[ProLeasePlugin] Created new sheet",{name:a});if(!i)throw new Error("Failed to create or get sheet");const s=n[0]||[],l=n.slice(1)||[];s.forEach((t,e)=>{i.setCell(0,e,String(t),{type:"string",format:{bold:!0,alignment:"center"}})}),l.forEach((t,e)=>{t.forEach((t,n)=>{const o="number"==typeof t?"number":1===n?"date":"string";i.setCell(e+1,n,t,{type:o})})}),r.setActiveSheet(i.id),this.context.kernel.kernel.recalculate(i.id,void 0,{force:!0}),e.logger.info("[ProLeasePlugin] Sheet populated successfully",{contract:t.contractName,rows:l.length,cols:s.length}),this.context.ui.showToast(`Sheet "${a}" created with ${l.length} rows!`,"success")}catch(o){e.logger.error("[ProLeasePlugin] Sheet population failed",o),this.context.ui.showToast("Failed to create sheet","error")}}createCalculationWorker(){const t=new Blob(['\n      // IFRS 16 Calculation Worker\n      self.onmessage = function(event) {\n        const { action, payload } = event.data || {};\n        if (action !== \'calculate\') return;\n\n        try {\n          const rows = generate(payload);\n          const headers = getHeaders();\n          self.postMessage({\n            action: \'calculationComplete\',\n            payload: { contractData: payload, calculatedRows: [headers, ...rows] }\n          });\n        } catch (error) {\n          self.postMessage({ error: (error && error.message) || String(error) });\n        }\n      };\n\n      function getHeaders() {\n        return [\n          "Month #",\n          "Date",\n          "A) Sum of All Costs",\n          "B) Monthly Service Deductions",\n          "C) Landlord TI Allowance after Commence Date",\n          "D) Total Rent to be Capitalized (A + B + C)",\n          "Remaining Present Value",\n          "E) Interest",\n          "End of Month Lease Liability",\n          "Current Short Term (ST) Liability",\n          "Non Current Long Term (LT) Liability",\n          "Proof Column (ST+LT)",\n          "F) New Initial Landlord Allowance",\n          "I) Allowance Amortization",\n          "J) Allowance Closing Balance",\n          "K) New IDC",\n          "N) IDC Amortization",\n          "O) IDC Closing Balance",\n          "S) Opening ROU Asset",\n          "U) ROU Asset Amortization",\n          "V) ROU Asset Closing Balance",\n          "Total ROU Asset Closing Balance (J+O+V)",\n          "W) Total P&L Non-Financial Expense",\n          "P&L - Reported Lease Expense (E+W)"\n        ];\n      }\n\n      function generate(d) {\n        const rows = [];\n        const termMonths = Number(d.termMonths || 0);\n        const totalRent = Number(d.totalRent || 0);\n        const serviceDeductions = Number(d.serviceDeductions || 0);\n        const discountRate = Number(d.discountRate || 0);\n        const initialLandlordAllowance = Number(d.initialLandlordAllowance || 0);\n        const initialDirectCosts = Number(d.initialDirectCosts || 0);\n        const startDate = new Date(d.startDate);\n\n        const monthlyDiscountRate = Math.pow(1 + (discountRate / 100), 1/12) - 1;\n        const rentToCapitalize = totalRent - serviceDeductions;\n\n        // Calculate initial lease liability (present value of all payments)\n        let initialLeaseLiability = 0;\n        for (let i = 0; i < termMonths; i++) {\n          initialLeaseLiability += rentToCapitalize / Math.pow(1 + monthlyDiscountRate, i + 1);\n        }\n\n        // Opening ROU asset\n        const openingROU = initialLeaseLiability + initialDirectCosts - initialLandlordAllowance;\n\n        // Monthly amortization amounts\n        const allowanceAmort = termMonths > 0 ? initialLandlordAllowance / termMonths : 0;\n        const idcAmort = termMonths > 0 ? initialDirectCosts / termMonths : 0;\n        const rouAmort = termMonths > 0 ? openingROU / termMonths : 0;\n\n        // Running balances\n        let curLease = initialLeaseLiability;\n        let curAllowance = initialLandlordAllowance;\n        let curIDC = initialDirectCosts;\n        let curROU = openingROU;\n\n        // Generate monthly rows\n        for (let i = 1; i <= termMonths; i++) {\n          const row = [];\n          const curDate = new Date(startDate);\n          curDate.setMonth(curDate.getMonth() + (i - 1));\n\n          // Interest and principal\n          const interest = curLease * monthlyDiscountRate;\n          const principal = rentToCapitalize - interest;\n\n          // Month number and date\n          row[0] = i;\n          row[1] = curDate.toISOString().split(\'T\')[0];\n\n          // Costs\n          row[2] = totalRent;\n          row[3] = serviceDeductions;\n          row[4] = 0; // TI Allowance after commence (typically 0)\n          row[5] = rentToCapitalize;\n\n          // Remaining PV\n          let remainingPV = 0;\n          for (let j = i; j < termMonths; j++) {\n            remainingPV += rentToCapitalize / Math.pow(1 + monthlyDiscountRate, j - i + 1);\n          }\n          row[6] = remainingPV;\n\n          // Interest and liability\n          row[7] = interest;\n          curLease -= principal;\n          row[8] = Math.abs(curLease) < 0.01 ? 0 : curLease;\n\n          // ST/LT classification\n          let st = 0, lt = 0, tmp = curLease;\n          for (let m = 0; m < (termMonths - i); m++) {\n            const fInt = tmp * monthlyDiscountRate;\n            const fPr = rentToCapitalize - fInt;\n            if (m < 12) st += fPr;\n            else lt += fPr;\n            tmp -= fPr;\n          }\n          row[9] = st;\n          row[10] = lt;\n          row[11] = st + lt;\n\n          // Landlord allowance\n          row[12] = (i === 1) ? initialLandlordAllowance : 0;\n          row[13] = allowanceAmort;\n          curAllowance -= allowanceAmort;\n          row[14] = Math.abs(curAllowance) < 0.01 ? 0 : curAllowance;\n\n          // Initial direct costs\n          row[15] = (i === 1) ? initialDirectCosts : 0;\n          row[16] = idcAmort;\n          curIDC -= idcAmort;\n          row[17] = Math.abs(curIDC) < 0.01 ? 0 : curIDC;\n\n          // ROU asset\n          row[18] = curROU;\n          row[19] = rouAmort;\n          curROU -= rouAmort;\n          row[20] = Math.abs(curROU) < 0.01 ? 0 : curROU;\n\n          // Total ROU and P&L\n          row[21] = curROU + curIDC + curAllowance;\n          row[22] = rouAmort + idcAmort - allowanceAmort;\n          row[23] = interest + row[22];\n\n          rows.push(row);\n        }\n\n        return rows;\n      }\n    '],{type:"application/javascript"}),n=URL.createObjectURL(t),o=new Worker(n);return setTimeout(()=>{try{URL.revokeObjectURL(n)}catch(t){}},1e3),e.logger.info("[ProLeasePlugin] Calculation worker created"),o}refreshControlPanel(){const t=document.querySelector("#plugin-panel-prolease-manager .panel-content");t&&this.renderControlPanel(t)}promptNumber(t,e){const n=prompt(t,String(e));if(null===n)return null;const o=parseFloat(n);return isNaN(o)?null:o}generateId(){return`${Date.now()}-${Math.random().toString(36).substr(2,9)}`}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}formatCurrency(t){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:0,maximumFractionDigits:0}).format(t)}}const a=(new r).manifest,i={ProLeasePlugin:r,manifest:a,version:"6.0.0",name:"ProLease IFRS 16"};return t.ProLeasePlugin=r,t.default=i,t.manifest=a,Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}}),t}({},storageUtilsConsolidated);
//# sourceMappingURL=prolease-ifrs16-plugin.iife.js.map
